// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Voting {
    struct Candidate {
        uint id;
        string name;
        string party;
        uint voteCount;
    }

    address public admin;
    mapping(uint => Candidate) public candidates;
    mapping(address => bool) public voters;
    uint public candidatesCount;
    uint public votingStartTime;
    uint public votingEndTime;
    bool public votingActive;

    modifier onlyAdmin() {
        require(msg.sender == admin, "Only admin can call this function.");
        _;
    }

    modifier votingOpen() {
        require(block.timestamp >= votingStartTime && block.timestamp <= votingEndTime, "Voting is not active.");
        _;
    }

    constructor(uint _votingStartTime, uint _votingEndTime) {
        admin = msg.sender;
        votingStartTime = _votingStartTime;
        votingEndTime = _votingEndTime;
        votingActive = false;
    }

    function startVoting() public onlyAdmin {
        require(block.timestamp >= votingStartTime, "Voting start time is in the future.");
        votingActive = true;
    }

    function endVoting() public onlyAdmin {
        require(block.timestamp >= votingEndTime, "Voting end time is in the future.");
        votingActive = false;
    }

    function addCandidate(string memory _name, string memory _party) public onlyAdmin {
        require(!votingActive, "Cannot add candidates during active voting.");
        candidatesCount++;
        candidates[candidatesCount] = Candidate(candidatesCount, _name, _party, 0);
    }

    function vote(uint _candidateId) public votingOpen {
        require(!voters[msg.sender], "You have already voted.");
        require(_candidateId > 0 && _candidateId <= candidatesCount, "Invalid candidate ID.");

        voters[msg.sender] = true;
        candidates[_candidateId].voteCount++;
    }

    function getCandidate(uint _candidateId) public view returns (string memory, string memory, uint) {
        Candidate memory candidate = candidates[_candidateId];
        return (candidate.name, candidate.party, candidate.voteCount);
    }

    function getWinner() public view returns (string memory, string memory, uint) {
        uint winningVoteCount = 0;
        uint winningCandidateId = 0;
        for (uint i = 1; i <= candidatesCount; i++) {
            if (candidates[i].voteCount > winningVoteCount) {
                winningVoteCount = candidates[i].voteCount;
                winningCandidateId = i;
            }
        }
        Candidate memory winner = candidates[winningCandidateId];
        return (winner.name, winner.party, winner.voteCount);
    }
}

